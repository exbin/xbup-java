/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.component.panel;

import java.awt.BorderLayout;
import javax.swing.JDialog;
import javax.swing.JToolBar;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.component.GuiComponentModule;
import org.exbin.framework.gui.component.api.EditItemActions;
import org.exbin.framework.gui.component.api.EditItemActionsHandler;
import org.exbin.framework.gui.component.api.EditItemActionsUpdateListener;
import org.exbin.framework.gui.component.api.GuiComponentModuleApi;
import org.exbin.framework.gui.component.api.MoveItemActions;
import org.exbin.framework.gui.component.api.MoveItemActionsHandler;
import org.exbin.framework.gui.component.api.MoveItemActionsUpdateListener;
import org.exbin.framework.gui.utils.TestApplication;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Panel with side toolbar.
 *
 * @version 0.2.0 2016/03/22
 * @author ExBin Project (http://exbin.org)
 */
public class ToolBarSidePanel extends javax.swing.JPanel {

    private final XBApplication application;
    private MoveItemActionsHandler moveItemActionsHandler = null;
    private EditItemActionsHandler editItemActionsHandler = null;
    private JToolBar toolBar = null;
    private ToolBarPosition toolBarPosisition = ToolBarPosition.LEFT;

    public ToolBarSidePanel(XBApplication application) {
        this.application = application;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        JDialog dialog = WindowUtils.createBasicDialog();
        TestApplication testApplication = WindowUtils.getDefaultAppEditor();
        testApplication.addModule(GuiComponentModule.MODULE_ID, new GuiComponentModule());
        ToolBarSidePanel toolBarSidePanel = new ToolBarSidePanel(testApplication);
        toolBarSidePanel.setEditItemsHandler(new EditItemActionsHandler() {
            @Override
            public void performAddItem() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performEditItem() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performDeleteItem() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public boolean isSelection() {
                return true;
            }

            @Override
            public boolean isEditable() {
                return true;
            }

            @Override
            public void setUpdateListener(EditItemActionsUpdateListener updateListener) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        });

        toolBarSidePanel.setMoveItemsHandler(new MoveItemActionsHandler() {
            @Override
            public void performMoveUp() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performMoveDown() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performMoveTop() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performMoveBottom() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public boolean isSelection() {
                return true;
            }

            @Override
            public boolean isEditable() {
                return true;
            }

            @Override
            public void setUpdateListener(MoveItemActionsUpdateListener updateListener) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        });
        dialog.add(toolBarSidePanel);
        WindowUtils.invokeWindow(dialog);
    }

    public void setEditItemsHandler(EditItemActionsHandler editItemActionsHandler) {
        this.editItemActionsHandler = editItemActionsHandler;
        initToolBar();
        GuiComponentModuleApi componentModule = application.getModuleRepository().getModuleByInterface(GuiComponentModuleApi.class);
        EditItemActions editItemActions = componentModule.createEditItemActions(editItemActionsHandler);
        toolBar.add(editItemActions.getAddItemAction());
        toolBar.add(editItemActions.getEditItemAction());
        toolBar.add(editItemActions.getDeleteItemAction());
        editItemActions.updateEditItemActions();
    }

    public void setMoveItemsHandler(MoveItemActionsHandler moveItemActionsHandler) {
        this.moveItemActionsHandler = moveItemActionsHandler;
        initToolBar();
        GuiComponentModuleApi componentModule = application.getModuleRepository().getModuleByInterface(GuiComponentModuleApi.class);
        MoveItemActions moveItemActions = componentModule.createMoveItemActions(moveItemActionsHandler);
        if (editItemActionsHandler != null) {
            toolBar.addSeparator();
        }
        toolBar.add(moveItemActions.getMoveTopAction());
        toolBar.add(moveItemActions.getMoveUpAction());
        toolBar.add(moveItemActions.getMoveDownAction());
        toolBar.add(moveItemActions.getMoveBottomAction());
        moveItemActions.updateMoveItemActions();
    }

    private void initToolBar() {
        if (toolBar == null) {
            toolBar = new JToolBar();
            toolBar.setOrientation(JToolBar.VERTICAL);
            toolBar.setFloatable(false);
            add(toolBar, toolBarPosisition == ToolBarPosition.LEFT ? BorderLayout.WEST : BorderLayout.EAST);
        }
    }

    public ToolBarPosition getToolBarPosisition() {
        return toolBarPosisition;
    }

    public void setToolBarPosisition(ToolBarPosition toolBarPosisition) {
        this.toolBarPosisition = toolBarPosisition;
    }

    public enum ToolBarPosition {
        LEFT, RIGHT
    }
}
