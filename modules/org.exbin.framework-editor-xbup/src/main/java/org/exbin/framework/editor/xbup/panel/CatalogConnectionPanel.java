/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.editor.xbup.panel;

import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import org.exbin.framework.gui.options.api.OptionsPanel;
import org.exbin.framework.gui.options.api.OptionsPanel.ModifiedOptionListener;
import org.exbin.framework.gui.options.api.OptionsPanel.PathItem;

/**
 * XB Catalog Connection Options Panel.
 *
 * @version 0.2.0 2016/01/31
 * @author ExBin Project (http://exbin.org)
 */
public class CatalogConnectionPanel extends javax.swing.JPanel implements OptionsPanel {

    private ModifiedOptionListener modifiedOptionListener;
    public final String DEFAULT_CATALOG_UPDATE_CONNECTION = "";
    // private XBTextEditorFrame frame;

    /** Creates new form CatalogConnectionPanel */
    public CatalogConnectionPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serviceConnectionLabel = new javax.swing.JLabel();
        catalogUpdateConnectionLabel = new javax.swing.JLabel();
        requireRestartLabel = new javax.swing.JLabel();
        serviceConnectionCheckBox = new javax.swing.JCheckBox();
        serviceConnectionTextField = new javax.swing.JTextField();
        catalogUpdateConnectionTextField = new javax.swing.JTextField();
        defaultCatalogUpdateConnectionButton = new javax.swing.JButton();
        catalogUpdateConnectionCheckBox = new javax.swing.JCheckBox();

        serviceConnectionLabel.setText("Catalog connection point (empty for localhost)");
        serviceConnectionLabel.setName("serviceConnectionLabel"); // NOI18N

        catalogUpdateConnectionLabel.setText("Catalog Update Point (empty for central catalog)");
        catalogUpdateConnectionLabel.setName("catalogUpdateConnectionLabel"); // NOI18N

        requireRestartLabel.setText("To apply this application restart is required");
        requireRestartLabel.setName("requireRestartLabel"); // NOI18N

        serviceConnectionCheckBox.setSelected(true);
        serviceConnectionCheckBox.setText("Connect to Service");
        serviceConnectionCheckBox.setName("serviceConnectionCheckBox"); // NOI18N

        serviceConnectionTextField.setName("serviceConnectionTextField"); // NOI18N

        catalogUpdateConnectionTextField.setEnabled(false);
        catalogUpdateConnectionTextField.setName("catalogUpdateConnectionTextField"); // NOI18N

        defaultCatalogUpdateConnectionButton.setText("Default");
        defaultCatalogUpdateConnectionButton.setEnabled(false);
        defaultCatalogUpdateConnectionButton.setName("defaultCatalogUpdateConnectionButton"); // NOI18N
        defaultCatalogUpdateConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultCatalogUpdateConnectionButtonActionPerformed(evt);
            }
        });

        catalogUpdateConnectionCheckBox.setSelected(true);
        catalogUpdateConnectionCheckBox.setText("Built-in Catalog Source (if service not available)");
        catalogUpdateConnectionCheckBox.setName("catalogUpdateConnectionCheckBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serviceConnectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(requireRestartLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(catalogUpdateConnectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serviceConnectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(serviceConnectionTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(catalogUpdateConnectionTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(defaultCatalogUpdateConnectionButton))
                            .addComponent(catalogUpdateConnectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serviceConnectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serviceConnectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serviceConnectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(catalogUpdateConnectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catalogUpdateConnectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalogUpdateConnectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultCatalogUpdateConnectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(requireRestartLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultCatalogUpdateConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultCatalogUpdateConnectionButtonActionPerformed
        catalogUpdateConnectionTextField.setText(DEFAULT_CATALOG_UPDATE_CONNECTION);
    }//GEN-LAST:event_defaultCatalogUpdateConnectionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox catalogUpdateConnectionCheckBox;
    private javax.swing.JLabel catalogUpdateConnectionLabel;
    private javax.swing.JTextField catalogUpdateConnectionTextField;
    private javax.swing.JButton defaultCatalogUpdateConnectionButton;
    private javax.swing.JLabel requireRestartLabel;
    private javax.swing.JCheckBox serviceConnectionCheckBox;
    private javax.swing.JLabel serviceConnectionLabel;
    private javax.swing.JTextField serviceConnectionTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<PathItem> getPath() {
        ArrayList<OptionsPanel.PathItem> path = new ArrayList<>();
        path.add(new PathItem(null, "Catalog"));
        path.add(new PathItem("catalogConnection", "Catalog Connection")); // resourceMap.getString("options.Path.0")));
        return path;
    }

    @Override
    public void applyPreferencesChanges() {
        // throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void loadFromPreferences(Preferences preferences) {
        if (Boolean.parseBoolean(preferences.get("serviceConnectionAllowed", Boolean.toString(true))) != serviceConnectionCheckBox.isSelected()) {
            serviceConnectionCheckBox.doClick();
        }

        String catalogConnection = preferences.get("serviceConnectionURL", "");
        serviceConnectionTextField.setText(catalogConnection);

        if (Boolean.parseBoolean(preferences.get("catalogUpdateAllowed", Boolean.toString(true))) != catalogUpdateConnectionCheckBox.isSelected()) {
            catalogUpdateConnectionCheckBox.doClick();
        }

        String catalogUpdate = preferences.get("catalogUpdateURL", DEFAULT_CATALOG_UPDATE_CONNECTION);
        catalogUpdateConnectionTextField.setText(catalogUpdate);
    }

    @Override
    public void saveToPreferences(Preferences preferences) {
        preferences.put("serviceConnectionAllowed", Boolean.toString(serviceConnectionCheckBox.isSelected()));

        preferences.put("serviceConnectionURL", serviceConnectionTextField.getText());

        preferences.put("catalogUpdateAllowed", Boolean.toString(catalogUpdateConnectionCheckBox.isSelected()));

        preferences.put("catalogUpdateURL", catalogUpdateConnectionTextField.getText());
    }

    @Override
    public void setModifiedOptionListener(ModifiedOptionListener listener) {
    }
}
