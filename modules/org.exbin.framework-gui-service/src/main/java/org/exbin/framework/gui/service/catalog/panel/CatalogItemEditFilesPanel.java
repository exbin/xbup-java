/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.service.catalog.panel;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPopupMenu;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCNode;
import org.exbin.xbup.core.catalog.base.XBCXFile;
import org.exbin.xbup.core.catalog.base.service.XBCXFileService;
import org.exbin.framework.gui.menu.api.MenuManagement;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Catalog Specification Panel.
 *
 * @version 0.2.0 2016/02/01
 * @author ExBin Project (http://exbin.org)
 */
public class CatalogItemEditFilesPanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private XBCXFileService fileService;
    private final CatalogFilesTableModel filesModel;
    private int currentItem;
    private XBCNode currentNode;

    public CatalogItemEditFilesPanel() {
        filesModel = new CatalogFilesTableModel();

        initComponents();
        catalogFilesListTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    if (catalogFilesListTable.getSelectedRow() >= 0) {
                        setItem(catalogFilesListTable.getSelectedRow());
                    } else {
                        setItem(-1);
                    }

                    popupImportItemMenuItem.setEnabled(currentItem >= 0);
                    popupExportItemMenuItem.setEnabled(currentItem >= 0);
                    popupPropertiesMenuItem.setEnabled(currentItem >= 0);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePopupMenu = new javax.swing.JPopupMenu();
        popupAddFileMenuItem = new javax.swing.JMenuItem();
        popupImportItemMenuItem = new javax.swing.JMenuItem();
        popupExportItemMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        popupPropertiesMenuItem = new javax.swing.JMenuItem();
        catalogFilesListScrollPane = new javax.swing.JScrollPane();
        catalogFilesListTable = new javax.swing.JTable();

        filePopupMenu.setName("filePopupMenu"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/exbin/framework/gui/service/catalog/panel/resources/CatalogItemsTreePanel"); // NOI18N
        popupAddFileMenuItem.setText(bundle.getString("addFileMenuItem.text")); // NOI18N
        popupAddFileMenuItem.setName("popupAddFileMenuItem"); // NOI18N
        popupAddFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupAddFileMenuItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(popupAddFileMenuItem);

        popupImportItemMenuItem.setText("Import...");
        popupImportItemMenuItem.setEnabled(false);
        popupImportItemMenuItem.setName("popupImportItemMenuItem"); // NOI18N
        popupImportItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupImportItemMenuItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(popupImportItemMenuItem);

        popupExportItemMenuItem.setText("Export...");
        popupExportItemMenuItem.setEnabled(false);
        popupExportItemMenuItem.setName("popupExportItemMenuItem"); // NOI18N
        popupExportItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupExportItemMenuItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(popupExportItemMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        filePopupMenu.add(jSeparator1);

        jSeparator2.setName("jSeparator2"); // NOI18N
        filePopupMenu.add(jSeparator2);

        popupPropertiesMenuItem.setText(bundle.getString("propertiesMenuItem.text")); // NOI18N
        popupPropertiesMenuItem.setEnabled(false);
        popupPropertiesMenuItem.setName("popupPropertiesMenuItem"); // NOI18N
        popupPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupPropertiesMenuItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(popupPropertiesMenuItem);

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        catalogFilesListScrollPane.setComponentPopupMenu(filePopupMenu);
        catalogFilesListScrollPane.setName("catalogFilesListScrollPane"); // NOI18N

        catalogFilesListTable.setModel(filesModel);
        catalogFilesListTable.setComponentPopupMenu(filePopupMenu);
        catalogFilesListTable.setName("catalogFilesListTable"); // NOI18N
        catalogFilesListScrollPane.setViewportView(catalogFilesListTable);

        add(catalogFilesListScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void popupPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupPropertiesMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
    }//GEN-LAST:event_popupPropertiesMenuItemActionPerformed

    private void popupExportItemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupExportItemMenuItemActionPerformed
        XBCXFile file = filesModel.getItem(catalogFilesListTable.getSelectedRow());
        JFileChooser exportFileChooser = new JFileChooser(file.getFilename());
        exportFileChooser.setAcceptAllFileFilterUsed(true);
        if (exportFileChooser.showSaveDialog(WindowUtils.getFrame(this)) == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fileStream;
            try {
                fileStream = new FileOutputStream(exportFileChooser.getSelectedFile().getAbsolutePath());
                try {
                    fileStream.write(file.getContent());
                } finally {
                    fileStream.close();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CatalogItemEditFilesPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(CatalogItemEditFilesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_popupExportItemMenuItemActionPerformed

    private void popupImportItemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupImportItemMenuItemActionPerformed
        if (catalogFilesListTable.getSelectedRow() >= 0) {
            JFileChooser importFileChooser = new JFileChooser();
            if (importFileChooser.showOpenDialog(WindowUtils.getFrame(this)) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fileStream;
                try {
                    fileStream = new FileInputStream(importFileChooser.getSelectedFile().getAbsolutePath());
                    byte[] fileContent = new byte[(int) (new File(importFileChooser.getSelectedFile().getAbsolutePath())).length()];
                    DataInputStream dataIs = new DataInputStream(fileStream);
                    dataIs.readFully(fileContent);
                    filesModel.setItemData(catalogFilesListTable.getSelectedRow(), fileContent);
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                    Logger.getLogger(CatalogItemEditFilesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_popupImportItemMenuItemActionPerformed

    private void popupAddFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupAddFileMenuItemActionPerformed
        if (currentNode != null) {
            JFileChooser importFileChooser = new JFileChooser();
            if (importFileChooser.showOpenDialog(WindowUtils.getFrame(this)) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fileStream;
                try {
                    fileStream = new FileInputStream(importFileChooser.getSelectedFile().getAbsolutePath());
                    byte[] fileData = new byte[(int) (new File(importFileChooser.getSelectedFile().getAbsolutePath())).length()];
                    DataInputStream dataIs = new DataInputStream(fileStream);
                    dataIs.readFully(fileData);
                    filesModel.addItem(importFileChooser.getSelectedFile().getName(), fileData);
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                    Logger.getLogger(CatalogItemEditFilesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_popupAddFileMenuItemActionPerformed

    public void setNode(XBCNode node) {
        currentNode = node;
        filesModel.setNode(node);
        catalogFilesListTable.revalidate();
    }

    public void setItem(int item) {
        currentItem = item;
        // itemPanel.setItem(item);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane catalogFilesListScrollPane;
    private javax.swing.JTable catalogFilesListTable;
    private javax.swing.JPopupMenu filePopupMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem popupAddFileMenuItem;
    private javax.swing.JMenuItem popupExportItemMenuItem;
    private javax.swing.JMenuItem popupImportItemMenuItem;
    private javax.swing.JMenuItem popupPropertiesMenuItem;
    // End of variables declaration//GEN-END:variables

    public JPopupMenu getPopupMenu() {
        return filePopupMenu;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;

        fileService = catalog == null ? null : (XBCXFileService) catalog.getCatalogService(XBCXFileService.class);

        filesModel.setCatalog(catalog);
    }

    public void setMenuManagement(MenuManagement menuManagement) {
        menuManagement.insertMainPopupMenu(filePopupMenu, 4);
    }

    public void persist() {
        filesModel.persist();
    }
}
