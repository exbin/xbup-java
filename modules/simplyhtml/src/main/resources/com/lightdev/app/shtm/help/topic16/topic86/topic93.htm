<html>
  <head>
    <link href="../../style.css" rel="stylesheet" type="text/css">
    
  </head>
  <body>
    <p class="heading1">
      Changing table and cell attributes
    </p>
    <p>
      In the previous chapters basic methods for creating and manipulating a 
      table <i>structure</i> are explained in detail. In this chapter it is 
      discussed how to select and apply <i>attribute </i>changes to an 
      existing table structure.
    </p>
    <p class="heading3">
      Structural changes vs. attribute changes
    </p>
    <p>
      Structural changes to a table (insert row, delete column, etc.) all can 
      be done in a single step. To add these functions to the GUI of an 
      application, a single menu item or tool bar button is sufficient. A GUI 
      for table attribute changes is achieved not as easy. There are many 
      attributes each talbe element can have and it would be very tedious to 
      change single attributes through single menu items each.
    </p>
    <p>
      Most of the time, attribute changes are to be applied as a group of 
      changes to a group of elements as one (for instance changing all cells 
      of one column to a certain width and background color). With class <font face="'Courier New',Monospaced,Monospace">
TableDialog</font> a new dialog for changing table attributes is created 
      therefore.
    </p>
    <p class="heading3">
      Introducing TableDialog and DialogShell
    </p>
    <p>
      It is called through new action <font face="'Courier New',Monospaced,Monospace">
FormatTableAction</font> of class <font face="'Courier New',Monospaced,Monospace">
FrmMain</font>. With class <font face="'Courier New',Monospaced,Monospace">
      TableDialog</font> the second formatting dialog is introduced after 
      class <font face="'Courier New',Monospaced,Monospace"><a href="../../topic16/topic74/topic80.htm">
FontDialog</a></font> which is why a new base class <font face="'Courier New',Monospaced,Monospace">
DialogShell</font> is created too. <font face="'Courier New',Monospaced,Monospace">
DialogShell</font> has all methods shared by dialogs of application SimplyHTML 
      thus avoiding code redundancies.
    </p>
    <p class="heading2">
      Class TableDialog
    </p>
    <p>
      <font face="'Courier New',Monospaced,Monospace">TableDialog</font> wraps 
      all attributes of tables and table cells changeable in SimplyHTML into 
      one dialog. It partly uses components already used in class <font face="'Courier New',Monospaced,Monospace">
FontPanel</font> and partly introduces additional components.
    </p>
    <p class="heading3">
      Common setting and getting of attributes
    </p>
    <p>
      Class <font face="'Courier New',Monospaced,Monospace">AttributeSet</font>
       in package <font face="'Courier New',Monospaced,Monospace">
      javax.swing.text</font> provides a good way of grouping an arbitrary 
      number of attributes and passing them between elements and components. 
      For this reason application SimplyHTML uses interface <font face="'Courier New',Monospaced,Monospace">
AttributeComponent</font> (renamend from FontComponent of stage 3) to define a 
      common way of setting and getting attributes to and from GUI components 
      via <font face="'Courier New',Monospaced,Monospace">AttributeSets</font>.
    </p>
    <p>
      All components of <font face="'Courier New',Monospaced,Monospace">
      TableDialog</font> are implementing interface <font face="'Courier New',Monospaced,Monospace">
AttributeComponent</font>. They are held in two <font face="'Courier New',Monospaced,Monospace">
Vectors</font>, one for table attributes and one for table cell attributes. 
      Whenever a <font face="'Courier New',Monospaced,Monospace">TableDialog</font>
 is created to reflect a current set of attributes existing for a table and 
      table cell, simply respective attribute sets are passed to methods <font face="'Courier New',Monospaced,Monospace">
setTableAttributes</font> and <font face="'Courier New',Monospaced,Monospace">
      setCellAttributes</font>.
    </p>
    <p>
      Both methods then iterate through the mentioned component <font face="'Courier New',Monospaced,Monospace">
Vectors</font> calling method <font face="'Courier New',Monospaced,Monospace">
      setValue</font> on each of their components. Each component then picks 
      its attribute(s) from the attribute set and displays them accordingly. 
      Similarly, attributes are returnd by <font face="'Courier New',Monospaced,Monospace">
TableDialog</font> with methods <font face="'Courier New',Monospaced,Monospace">
getTableAttributes</font> and <font face="'Courier New',Monospaced,Monospace">
      getCellAttributes</font>. Again these methods iterate through the 
      component <font face="'Courier New',Monospaced,Monospace">Vectors</font> 
      to call method <font face="'Courier New',Monospaced,Monospace">getValue</font>
 on each component returning attribute sets with the sum of all changed 
      attributes.
    </p>
    <p class="heading3">
      Returning only changed attributes
    </p>
    <p>
      All components of <font face="'Courier New',Monospaced,Monospace">
      TagbleDialog</font> 'remember' the original attribute value and only 
      return an attribute when it was changed compared to that original value. 
      This mechanism ensures only attributes being applied, that have been set 
      through the dialog although other attributes were shown in the dialog as 
      well. Without this mechanism always all attributes would be returned by 
      the dialog regardless of wheteher they changed, returning only changed 
      attributes avoids redundant storage of attributes.
    </p>
    <p class="heading2">
      Applying attributes returned by TableDialog
    </p>
    <p>
      To apply table attributes method <font face="'Courier New',Monospaced,Monospace">
applyTableAttributes</font> of class <font face="'Courier New',Monospaced,Monospace">
SHTMLEditorPane</font> is called. It gets the table element from the current 
      caret position and passes it to method <font face="'Courier New',Monospaced,Monospace"><a href="../../topic16/topic86/topic96.htm">
addAttributes</a></font> of class <font face="'Courier New',Monospaced,Monospace">
SHTMLDocument</font> along with the attributes to apply.
    </p>
    <p>
      Basically the same is done for applying cell attributes with the 
      difference that a range of cells is passed in addition. Depending on the 
      users choice to apply attributes to the current cell only, the current 
      column, the current row or all cells of the table, method <font face="'Courier New',Monospaced,Monospace">
applyCellAttributes</font> of class <font face="'Courier New',Monospaced,Monospace">
SHTMLEditorPane</font> iterates through the appropriate range of table cells 
      and calls method <font face="'Courier New',Monospaced,Monospace">
      addAttributes</font> of class <font face="'Courier New',Monospaced,Monospace">
SHTMLDocument</font> accordingly.
    </p>
  </body>
</html>
