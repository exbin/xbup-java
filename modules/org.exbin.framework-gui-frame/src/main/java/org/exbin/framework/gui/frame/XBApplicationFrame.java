/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.frame;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Rectangle;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.frame.api.ApplicationFrameHandler;
import org.exbin.framework.gui.frame.api.GuiFrameModuleApi;
import org.exbin.framework.gui.menu.api.GuiMenuModuleApi;

/**
 * Basic appplication frame.
 *
 * @version 0.2.0 2016/03/25
 * @author ExBin Project (http://exbin.org)
 */
public class XBApplicationFrame extends javax.swing.JFrame implements ApplicationFrameHandler {

    private XBApplication application;
    private ApplicationExitHandler exitHandler;

    public XBApplicationFrame() {
        initComponents();
        toolBar.setVisible(false);

        // Actions on change of look&feel
        UIManager.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                SwingUtilities.updateComponentTreeUI(XBApplicationFrame.this);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        statusBar = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusPanel = new javax.swing.JPanel();
        emptyStatusPanel = new javax.swing.JPanel();
        mainStatusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        progressStatusPanel = new javax.swing.JPanel();
        statusProgressBar = new javax.swing.JProgressBar();
        stopProgressButton = new javax.swing.JButton();
        busyStatusPanel = new javax.swing.JPanel();
        busyProgressBar = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setFocusable(false);
        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        statusBar.setLayout(new java.awt.BorderLayout());
        statusBar.add(statusPanelSeparator, java.awt.BorderLayout.NORTH);

        statusPanel.setPreferredSize(new java.awt.Dimension(649, 26));
        statusPanel.setRequestFocusEnabled(false);
        statusPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout emptyStatusPanelLayout = new javax.swing.GroupLayout(emptyStatusPanel);
        emptyStatusPanel.setLayout(emptyStatusPanelLayout);
        emptyStatusPanelLayout.setHorizontalGroup(
            emptyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        emptyStatusPanelLayout.setVerticalGroup(
            emptyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        statusPanel.add(emptyStatusPanel, "default");

        mainStatusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        mainStatusPanel.add(statusLabel);

        statusPanel.add(mainStatusPanel, "main");

        statusProgressBar.setIndeterminate(true);
        statusProgressBar.setMinimumSize(new java.awt.Dimension(10, 10));
        statusProgressBar.setRequestFocusEnabled(false);
        statusProgressBar.setStringPainted(true);

        stopProgressButton.setText("Stop");
        stopProgressButton.setEnabled(false);
        stopProgressButton.setMinimumSize(new java.awt.Dimension(67, 15));
        stopProgressButton.setPreferredSize(new java.awt.Dimension(75, 20));

        javax.swing.GroupLayout progressStatusPanelLayout = new javax.swing.GroupLayout(progressStatusPanel);
        progressStatusPanel.setLayout(progressStatusPanelLayout);
        progressStatusPanelLayout.setHorizontalGroup(
            progressStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressStatusPanelLayout.createSequentialGroup()
                .addComponent(statusProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopProgressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        progressStatusPanelLayout.setVerticalGroup(
            progressStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stopProgressButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        statusPanel.add(progressStatusPanel, "progress");

        busyStatusPanel.setLayout(new java.awt.BorderLayout());

        busyProgressBar.setIndeterminate(true);
        busyProgressBar.setRequestFocusEnabled(false);
        busyProgressBar.setStringPainted(true);
        busyStatusPanel.add(busyProgressBar, java.awt.BorderLayout.CENTER);

        statusPanel.add(busyStatusPanel, "busy");

        statusBar.add(statusPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(statusBar, java.awt.BorderLayout.SOUTH);
        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (exitHandler == null) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (exitHandler != null) {
            exitHandler.executeExit(this);
        } else {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar busyProgressBar;
    private javax.swing.JPanel busyStatusPanel;
    private javax.swing.JPanel emptyStatusPanel;
    private javax.swing.JPanel mainStatusPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel progressStatusPanel;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JProgressBar statusProgressBar;
    private javax.swing.JButton stopProgressButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    /**
     * Main method to test frame.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /**
         * Create and display the form.
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                XBApplicationFrame frame = new XBApplicationFrame();
                frame.setVisible(true);
            }
        });
    }

    @Override
    public Frame getFrame() {
        return this;
    }

    @Override
    public void setToolBarVisible(boolean toolBarVisible) {
        toolBar.setVisible(toolBarVisible);
    }

    @Override
    public void setStatusBarVisible(boolean statusBarVisible) {
        statusBar.setVisible(statusBarVisible);
    }

    @Override
    public void setToolBarCaptionsVisible(boolean captionsVisible) {
        Component[] comps = toolBar.getComponents();

        for (Component comp : comps) {
            if (comp instanceof JButton) {
                ((JButton) comp).setHideActionText(!captionsVisible);
            }
        }
    }

    @Override
    public void setApplication(XBApplication application) {
        this.application = application;
        setTitle(application.getAppBundle().getString("Application.name"));
        setIconImage(new ImageIcon(getClass().getResource(application.getAppBundle().getString("Application.icon"))).getImage());
    }

    @Override
    public void setMainPanel(Component component) {
        component.setBackground(Color.RED);
        getContentPane().add(component, java.awt.BorderLayout.CENTER);
    }

    @Override
    public void loadMainMenu(XBApplication application) {
        GuiMenuModuleApi menuModule = application.getModuleRepository().getModuleByInterface(GuiMenuModuleApi.class);
        menuModule.buildMenu(menuBar, GuiFrameModule.MAIN_MENU_ID);
    }

    @Override
    public void loadMainToolBar(XBApplication application) {
        GuiMenuModuleApi menuModule = application.getModuleRepository().getModuleByInterface(GuiMenuModuleApi.class);
        menuModule.buildToolBar(toolBar, GuiFrameModule.MAIN_TOOL_BAR_ID);
    }

    public void addStatusBar(JPanel panel, String statusBarId) {
        statusPanel.add(panel, statusBarId);
    }

    public void switchStatusBar(String statusBarId) {
        CardLayout layout = (CardLayout) statusPanel.getLayout();
        layout.show(statusPanel, statusBarId);
    }

    @Override
    public void setDefaultSize(Dimension windowSize) {
        if (application != null) {
            String rectangleString = application.getAppPreferences().get(GuiFrameModuleApi.PREFERENCES_FRAME_RECTANGLE, "");
            if (!rectangleString.isEmpty()) {
                String[] split = rectangleString.split("[,]");
                Rectangle rect = new Rectangle(Integer.valueOf(split[0]), Integer.valueOf(split[1]), Integer.valueOf(split[2]), Integer.valueOf(split[3]));
                setBounds(rect);
                return;
            }
        }
        setSize(windowSize);
        setLocationRelativeTo(null);
    }

    void setApplicationExitHandler(ApplicationExitHandler exitHandler) {
        this.exitHandler = exitHandler;
    }
}
