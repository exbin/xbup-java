<html>
  <head>
    <link href="../../style.css" rel="stylesheet" type="text/css">
    <title>    </title>
    
  </head>
  <body>
    <p class="heading1">
      Adding syntax highlighting
    </p>
    <p>
      The <a href="../../topic16/topic168/topic169.htm">previous chapter</a> 
      describes how a simple HTML code editor can be built. But with a plain 
      text view structure and content of a HTML file is not visually 
      separated. To improve legibility, syntax highlighting can be used: By 
      displaying certain parts such as tags or attributes in a color or style 
      different to the one used for content the reader can easily find certain 
      parts of the document.
    </p>
    <p>
      There are different approaches possible to implement syntax 
      highlighting. For SimplyHTML regular expressions are used for their 
      simple way of defining patterns in a single expression.
    </p>
    <p class="heading2">
      Class SyntaxPane
    </p>
    <p class="standard">
      A new class <font face="'Courier New',Monospaced,Monospace">SyntaxPane</font>
 is created as a subclass of <font face="'Courier New',Monospaced,Monospace">
      JEditorPane</font>. In the constructor of <font face="'Courier New',Monospaced,Monospace">
SyntaxPane</font> method <font face="'Courier New',Monospaced,Monospace">
      setupPatterns</font> is called, which defines the patterns for HTML 
      tags, attributes and attribute content. Method <font face="'Courier New',Monospaced,Monospace">
setMarks</font> (see below) is used to apply syntax highlighting to a given 
      part of the document in the <font face="'Courier New',Monospaced,Monospace">
SyntaxPane</font>.
    </p>
    <p>
      The <font face="'Courier New',Monospaced,Monospace">SyntaxPane</font> 
      registers itself as a <font face="'Courier New',Monospaced,Monospace">
      CaretListener</font> and uses method <font face="'Courier New',Monospaced,Monospace">
caretUpdate</font> to keep the syntax highlighting up to date for any changed 
      text. When a document is shown initially, <font face="'Courier New',Monospaced,Monospace">
setMarks</font> is called for the entire content (making it a lengthier 
      process for bigger documents to display the highlighting initially). 
      During changes only the highlighting of the current line is updated so 
      that typing text is not slowed down too much.
    </p>
    <p>
      A tradeoff with above approach is that multiline formats such as 
      multiline comments are not handled with it.
    </p>
    <p class="heading3">
      Method setupPatterns
    </p>
    <p>
      Method <font face="'Courier New',Monospaced,Monospace">setupPatterns</font>
 uses regular expressions to define a pattern for each element to be shown 
      different from normal content. A HTML tag for instance is enclosed in &lt; 
      and &gt; and can have letters and numbers with or without a slash inside 
      those markers. An attribute ends with =, etc. For each <font face="'Courier New',Monospaced,Monospace">
Pattern</font> an <font face="'Courier New',Monospaced,Monospace">AttributeSet</font>
 is created having the style to apply for that particular <font face="'Courier New',Monospaced,Monospace">
Pattern</font>.
    </p>
    <p>
      In method <font face="'Courier New',Monospaced,Monospace">setupPatterns</font>
 a <font face="'Courier New',Monospaced,Monospace">Vector</font> is used to 
      hold pairs of one <font face="'Courier New',Monospaced,Monospace">Pattern</font>
 and one <font face="'Courier New',Monospaced,Monospace">AttributeSet</font> 
      wrapped into inner class <font face="'Courier New',Monospaced,Monospace">
      RegExStyle</font>.
    </p>
    <p class="heading3">
      Inner class RegExStyle
    </p>
    <p>
      Inner class <font face="'Courier New',Monospaced,Monospace">RegExStyle</font>
 is used as a convenience class to bundle a <font face="'Courier New',Monospaced,Monospace">
Pattern</font> with a set of attributes. It simply has two class fields for 
      the <font face="'Courier New',Monospaced,Monospace">Pattern</font> and 
      the <font face="'Courier New',Monospaced,Monospace">AttributeSet</font> 
      and respective getters and setters. All defined <font face="'Courier New',Monospaced,Monospace">
RegExStyles</font> are stored in <font face="'Courier New',Monospaced,Monospace">
Vector</font> <font face="'Courier New',Monospaced,Monospace">patterns</font> 
      of class <font face="'Courier New',Monospaced,Monospace">SyntaxPane</font>
 .
    </p>
    <p class="heading3">
      Method setMarks
    </p>
    <p>
      Method <font face="'Courier New',Monospaced,Monospace">setMarks</font> 
      is the public member of <font face="'Courier New',Monospaced,Monospace">
      SyntaxPane</font> which is used to apply syntax highlighting to a given 
      portion of the current document. Method <font face="'Courier New',Monospaced,Monospace">
setMarks</font> creates an instance of inner class <font face="'Courier New',Monospaced,Monospace">
StyleUpdater</font> (see below) and calls <font face="'Courier New',Monospaced,Monospace">
invokeLater</font> of class <font face="'Courier New',Monospaced,Monospace">
      SwingUtilities</font> to have styles updated without conflicts in the 
      event dispatch thread.
    </p>
    <p class="heading3">
      Inner class StyleUpdater
    </p>
    <p>
      Class <font face="'Courier New',Monospaced,Monospace">StyleUpdater</font>
       implements the <font face="'Courier New',Monospaced,Monospace">Runnable</font>
 interface by wrapping its functionality in a public method named <font face="'Courier New',Monospaced,Monospace">
run</font>. Its main task is to apply styles associated with regular 
      expression patterns to a given portion of the document which is 
      currently edited.
    </p>
    <p>
      This is done by iterating through <font face="'Courier New',Monospaced,Monospace">
Vector</font> <font face="'Courier New',Monospaced,Monospace">patterns</font> 
      of class <font face="'Courier New',Monospaced,Monospace">SyntaxPane</font>
 . For each <font face="'Courier New',Monospaced,Monospace">Pattern</font> 
      found a <font face="'Courier New',Monospaced,Monospace">Matcher</font> 
      is created. To all instances of the the <font face="'Courier New',Monospaced,Monospace">
Pattern</font> found by the <font face="'Courier New',Monospaced,Monospace">
      Matcher</font> the style associated to the <font face="'Courier New',Monospaced,Monospace">
Pattern</font> is applied.
    </p>
    <p class="heading3">
      Method caretUpdate
    </p>
    <p>
      Method <font face="'Courier New',Monospaced,Monospace">caretUpdate</font>
       finds out the start and end position of the line the caret currently is 
      in and calls method <font face="'Courier New',Monospaced,Monospace">
      setMarks</font> for this portion of text each time the caret position 
      changes.
    </p>
    <p class="heading2">
      Recommended readings
    </p>
    <p>
      'Regular Expressions and the JavaTM Programming Language' at
    </p>
    <p>
      <font color="#3333ff">
      http://developer.java.sun.com/developer/technicalArticles/releases/1.4regex/ 
</font>
    </p>
    <p>
      and
    </p>
    <p>
      presentation slides 'Rich Clients for Web Services' from JavaOne 2002 at
    </p>
    <p>
      <font color="#3333ff">
      http://servlet.java.sun.com/javaone/resources/content/sf2002/conf/sessions/pdfs/2274.pdf 
</font>
    </p>
  </body>
</html>
