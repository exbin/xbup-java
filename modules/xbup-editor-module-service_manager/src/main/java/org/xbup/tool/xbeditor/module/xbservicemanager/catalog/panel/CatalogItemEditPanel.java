/*
 * Copyright (C) XBUP Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.xbup.tool.xbeditor.module.xbservicemanager.catalog.panel;

import javax.swing.table.DefaultTableModel;
import org.xbup.lib.xb.catalog.XBACatalog;
import org.xbup.lib.xb.catalog.base.XBCBase;
import org.xbup.lib.xb.catalog.base.XBCItem;
import org.xbup.lib.xb.catalog.base.XBCXStri;
import org.xbup.lib.xb.catalog.base.service.XBCItemService;
import org.xbup.lib.xb.catalog.base.service.XBCXDescService;
import org.xbup.lib.xb.catalog.base.service.XBCXNameService;
import org.xbup.lib.xb.catalog.base.service.XBCXStriService;
import org.xbup.lib.xbcatalog.entity.XBEItem;

/**
 * Panel for properties of the catalog item.
 *
 * @version 0.1 wr23.0 2013/09/22
 * @author XBUP Project (http://xbup.org)
 */
public class CatalogItemEditPanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private XBCItem catalogItem;

    /** Creates new form CatalogItemEditPanel */
    public CatalogItemEditPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        scrollPane.setName("scrollPane"); // NOI18N

        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertiesTable.setName("propertiesTable"); // NOI18N
        scrollPane.setViewportView(propertiesTable);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable propertiesTable;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    public void setCatalogItem(XBCItem catalogItem) {
        this.catalogItem = catalogItem;
        DefaultTableModel tableModel = (DefaultTableModel)propertiesTable.getModel();

        XBCXStriService striService = (XBCXStriService)catalog.getCatalogService(XBCXStriService.class);
        XBCXNameService nameService = (XBCXNameService)catalog.getCatalogService(XBCXNameService.class);
        XBCXDescService descService = (XBCXDescService)catalog.getCatalogService(XBCXDescService.class);

        // Remove all rows
        for (int i = tableModel.getRowCount() -1; i > 0; i--) {
            tableModel.removeRow(i);
        }

        String parentId = "";
        if (catalogItem.getParent() != null) {
            parentId = catalogItem.getParent().getId().toString();
        }
        tableModel.addRow(new String[] {"Name", nameService.getItemNameText(catalogItem)});
        tableModel.addRow(new String[] {"Description", descService.getItemDescText(catalogItem)});
        tableModel.addRow(new String[] {"ParentId", parentId});
        String itemIndex = null;
        Long xbIndex = catalogItem.getXBIndex();
        if (xbIndex != null) {
            itemIndex = xbIndex.toString();
        }
        tableModel.addRow(new String[] {"XBIndex", itemIndex});

        String pathName = null;
        XBCXStri stringId = striService.getItemStringId(catalogItem);
        if (stringId != null) {
            pathName = stringId.getText();
        }
        tableModel.addRow(new String[] {"StringId", pathName});
    }

    public XBCItem getCatalogItem() {
        return catalogItem;
    }

    public void persist() {
        XBCXStriService striService = (XBCXStriService)catalog.getCatalogService(XBCXStriService.class);
        XBCItemService itemService = (XBCItemService)catalog.getCatalogService(XBCItemService.class);
        XBCXNameService nameService = (XBCXNameService)catalog.getCatalogService(XBCXNameService.class);
        XBCXDescService descService = (XBCXDescService)catalog.getCatalogService(XBCXDescService.class);

        DefaultTableModel tableModel = (DefaultTableModel)propertiesTable.getModel();
        nameService.setItemNameText(catalogItem, (String) tableModel.getValueAt(0, 1));
        descService.setItemDescText(catalogItem, (String) tableModel.getValueAt(1, 1));
        if (catalogItem instanceof XBEItem) {
            String xbIndex = (String) tableModel.getValueAt(3, 1);
            if (xbIndex != null) {
                ((XBEItem) catalogItem).setXBIndex(Long.parseLong(xbIndex));
            } else {
                ((XBEItem) catalogItem).setXBIndex(null);
            }

            String parentId = (String) tableModel.getValueAt(2, 1);
            if ((!"".equals(parentId))&&(parentId != null)) {
                ((XBEItem) catalogItem).setParent((XBEItem)itemService.getItem(Long.parseLong(parentId)));
            } else {
                ((XBEItem) catalogItem).setParent(null);
            }

            itemService.persistItem((XBCBase) catalogItem);
        }

        striService.setItemStringIdText(catalogItem, (String) tableModel.getValueAt(4, 1));
    }

    /**
     * @return the catalog
     */
    public XBACatalog getCatalog() {
        return catalog;
    }

    /**
     * @param catalog the catalog to set
     */
    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
    }
}
