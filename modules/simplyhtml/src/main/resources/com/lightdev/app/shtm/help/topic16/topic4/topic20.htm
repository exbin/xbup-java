<html>
  <head>
    <link href="../../style.css" rel="stylesheet" type="text/css">
    
  </head>
  <body>
    <p class="heading1">
      Connecting GUI and functionality
    </p>
    <p>
      Functionality of an application - more or less the application kernel - 
      usually is separated from the graphical user interface (GUI) in separate 
      classes. In some cases it makes sense, to combine both in one class or 
      to create inner classes within another class too.
    </p>
    <p>
      Still there must be a connection between the two, application kernel and 
      GUI, which can be built by using actions.
    </p>
    <p>
      Actions are explained in general below. In the follwoing chapters some 
      of the actions of FrmMain are explained in greater detail. Additional 
      comments about the actions can be found in the source code.
    </p>
    <p class="heading2">
      Actions
    </p>
    <p>
      Action classes are a design approach to make a central connection 
      between GUI and functionality. With functions being coded as actions, 
      respective functionality is kept in a central place and can be centrally 
      combined with code dealing with availability and behaviour of the 
      respective functions during certain states of the application.
    </p>
    <p class="heading3">
      Why actions make sense
    </p>
    <p>
      Coding certain functionality as actions makes code easier to maintain, 
      because code is stored at exactly one location while the resulting 
      action and its appearance can be connected to several GUI elements such 
      as a menu item and a tool bar button for instance.
    </p>
    <p class="heading3">
      What actions do
    </p>
    <p>
      An action can be constructed with a certain name and icon. Components 
      such as menu items or buttons automatically display an action's name and 
      icon when it is associated with them. As well the action's state 
      (enabled or not enabled) automatically is reflected in the component's 
      display (dimmed or normally shown).
    </p>
    <p>
      When selecting a component that has an action associated to it, this 
      component automatically fires an action event that calls method 
      actionPerformed of that action. An <font face="'Courier New',Monospaced,Monospace">
ActionEvent</font> object is created automatically describing the event that 
      led to calling the action.
    </p>
    <p>
      In essence a big advantage of using actions aside of their easier 
      maintenance is that no additional coding is required to support the 
      mentioned interactions and dependencies.
    </p>
    <p class="heading3">
      How actions are designed in class FrmMain
    </p>
    <p>
      In class <font face="'Courier New',Monospaced,Monospace">FrmMain</font>, 
      the actions are designed as inner classes. With that the actions have 
      access to <font face="'Courier New',Monospaced,Monospace">FrmMain's</font>
 fields and methods without <font face="'Courier New',Monospaced,Monospace">
      FrmMain</font> having to pass references to the actions explicitly. The 
      actions defined so far have a lot to do with the documents shown in<font face="'Courier New',Monospaced,Monospace">
 FrmMain</font> so that access to <font face="'Courier New',Monospaced,Monospace"><a href="../../topic16/topic4/topic12/topic18.htm">
jtpDocs</a></font> is quite helpful.
    </p>
    <p>
      In the following chapters we look into some of the <a href="../../topic16/topic4/topic20/topic28.htm">
actions of FrmMain</a> in detail.
    </p>
  </body>
</html>
