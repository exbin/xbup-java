/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.component.panel;

import java.awt.BorderLayout;
import javax.swing.JDialog;
import javax.swing.JToolBar;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.menu.GuiMenuModule;
import org.exbin.framework.gui.menu.api.ClipboardActions;
import org.exbin.framework.gui.menu.api.GuiMenuModuleApi;
import org.exbin.framework.gui.undo.api.GuiUndoModuleApi;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.framework.gui.menu.api.ClipboardActionsHandler;
import org.exbin.framework.gui.menu.api.ClipboardActionsUpdateListener;
import org.exbin.framework.gui.undo.GuiUndoModule;
import org.exbin.framework.gui.undo.api.UndoActions;
import org.exbin.framework.gui.undo.api.UndoActionsHandler;
import org.exbin.framework.gui.undo.api.UndoUpdateListener;
import org.exbin.framework.gui.utils.TestApplication;

/**
 * Panel with editation toolbar.
 *
 * @version 0.2.0 2016/03/21
 * @author ExBin Project (http://exbin.org)
 */
public class ToolBarEditorPanel extends javax.swing.JPanel {

    private final XBApplication application;
    private UndoActionsHandler undoHandler = null;
    private ClipboardActionsHandler clipboardHandler = null;
    private JToolBar toolBar = null;

    public ToolBarEditorPanel(XBApplication application) {
        this.application = application;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        JDialog dialog = WindowUtils.createBasicDialog();
        TestApplication testApplication = WindowUtils.getDefaultAppEditor();
        testApplication.addModule(GuiUndoModule.MODULE_ID, new GuiUndoModule());
        testApplication.addModule(GuiMenuModule.MODULE_ID, new GuiMenuModule());
        ToolBarEditorPanel toolBarPanel = new ToolBarEditorPanel(testApplication);
        toolBarPanel.setUndoHandler(new UndoActionsHandler() {
            @Override
            public Boolean canUndo() {
                return true;
            }

            @Override
            public Boolean canRedo() {
                return true;
            }

            @Override
            public void performUndo() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performRedo() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performUndoManager() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void setUndoUpdateListener(UndoUpdateListener undoUpdateListener) {
            }
        });
        toolBarPanel.setClipboardHandler(new ClipboardActionsHandler() {
            @Override
            public void performCut() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performCopy() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performPaste() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performDelete() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void performSelectAll() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public boolean isSelection() {
                return true;
            }

            @Override
            public boolean isEditable() {
                return true;
            }

            @Override
            public boolean canSelectAll() {
                return true;
            }

            @Override
            public boolean canPaste() {
                return true;
            }

            @Override
            public void setUpdateListener(ClipboardActionsUpdateListener updateListener) {
            }
        });
        dialog.add(toolBarPanel);
        WindowUtils.invokeWindow(dialog);
    }

    public void setUndoHandler(UndoActionsHandler undoHandler) {
        this.undoHandler = undoHandler;
        initToolBar();
        GuiUndoModuleApi undoModule = application.getModuleRepository().getModuleByInterface(GuiUndoModuleApi.class);
        UndoActions undoActions = undoModule.createUndoActions(undoHandler);
        toolBar.add(undoActions.getUndoAction());
        toolBar.add(undoActions.getRedoAction());
        undoActions.updateUndoActions();
    }

    public void setClipboardHandler(ClipboardActionsHandler clipboardHandler) {
        this.clipboardHandler = clipboardHandler;
        initToolBar();
        if (undoHandler != null) {
            toolBar.addSeparator();
        }
        GuiMenuModuleApi menuModule = application.getModuleRepository().getModuleByInterface(GuiMenuModuleApi.class);
        ClipboardActions clipboardActions = menuModule.createClipboardActions(clipboardHandler);
        toolBar.add(clipboardActions.getCutAction());
        toolBar.add(clipboardActions.getCopyAction());
        toolBar.add(clipboardActions.getPasteAction());
        clipboardActions.updateClipboardActions();
    }

    private void initToolBar() {
        if (toolBar == null) {
            toolBar = new JToolBar();
            toolBar.setFloatable(false);
            add(toolBar, BorderLayout.NORTH);
        }
    }
}
