/*
 * Copyright (C) XBUP Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.xbup.tool.editor.module.service_manager.panel;

import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.xbup.tool.editor.module.service_manager.dialog.AddConnectionDialog;

/**
 * Connection Management Panel.
 *
 * @version 0.1.22 2012/11/29
 * @author XBUP Project (http://xbup.org)
 */
public class ConnectionPanel extends javax.swing.JPanel {

    /** Creates new ConnectionPanel */
    public ConnectionPanel() {
        initComponents();
        jList1.getModel().addListDataListener(new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
                contentsChanged(e);
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                contentsChanged(e);
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
//                jButton5.setEnabled(b);
//                jButton4.setEnabled(!jList1.isSelectionEmpty());
                selectAllButton.setEnabled(jList1.getModel().getSize() > 0);
            }
        });
        jList1.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    boolean emptySelection = jList1.isSelectionEmpty();
                    removeButton.setEnabled(!emptySelection);
                    selectAllButton.setEnabled(jList1.getModel().getSize() > 0);
                    if (!emptySelection) {
                        int[] indices = jList1.getSelectedIndices();
                        upButton.setEnabled(jList1.getMaxSelectionIndex() >= indices.length);
                        downButton.setEnabled(jList1.getMinSelectionIndex() + indices.length < jList1.getModel().getSize());
                    } else {
                        upButton.setEnabled(false);
                        downButton.setEnabled(false);
                    }
                }
            }
        });
        setConnectionList(new ArrayList<String>());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        customAddButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jList1.setModel(new ConnectionsListModel());
        jList1.setName("jList1"); // NOI18N
        jScrollPane3.setViewportView(jList1);

        jPanel1.setName("jPanel1"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/xbup/tool/editor/module/service_manager/panel/resources/ConnectionPanel"); // NOI18N
        upButton.setText(bundle.getString("upButton.text")); // NOI18N
        upButton.setEnabled(false);
        upButton.setName("upButton"); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setText(bundle.getString("downButton.text")); // NOI18N
        downButton.setEnabled(false);
        downButton.setName("downButton"); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        addButton.setText(bundle.getString("addButton.text")); // NOI18N
        addButton.setToolTipText(bundle.getString("addButton.toolTipText")); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText(bundle.getString("removeButton.text")); // NOI18N
        removeButton.setEnabled(false);
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        selectAllButton.setText(bundle.getString("selectAllButton.text")); // NOI18N
        selectAllButton.setEnabled(false);
        selectAllButton.setName("selectAllButton"); // NOI18N
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        customAddButton.setText(bundle.getString("customAddButton.text")); // NOI18N
        customAddButton.setEnabled(false);
        customAddButton.setName("customAddButton"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customAddButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(selectAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(downButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customAddButton)
                .addContainerGap(283, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddConnectionDialog dialog = new AddConnectionDialog(null, true); // XBManager.getApplication().getMainFrame()
        dialog.setLocationRelativeTo(dialog.getParent());
        dialog.setVisible(true);
        if (dialog.getOption() == JOptionPane.OK_OPTION) {
            ((ConnectionsListModel) jList1.getModel()).add(jList1.isSelectionEmpty() ? -1 : jList1.getSelectedIndex(), dialog.getConnection());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        ((ConnectionsListModel) jList1.getModel()).removeIndices(jList1.getSelectedIndices());
        jList1.clearSelection();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int[] indices = jList1.getSelectedIndices();
        int last = 0;
        for (int i = 0; i < indices.length; i++) {
            int next = indices[i];
            if (last != next) {
                ConnectionsListModel model = (ConnectionsListModel) jList1.getModel();
                String item = (String) model.getElementAt(next);
                model.add(next-1, item);
                jList1.getSelectionModel().addSelectionInterval(next-1, next-1);
                model.remove(next+1);
            } else {
                last++;
            }
        }

    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        int[] indices = jList1.getSelectedIndices();
        int last = jList1.getModel().getSize()-1;
        for (int i = indices.length; i > 0; i--) {
            int next = indices[i-1];
            if (last != next) {
                ConnectionsListModel model = (ConnectionsListModel) jList1.getModel();
                String item = (String) model.getElementAt(next);
                model.add(next+2, item);
                jList1.getSelectionModel().addSelectionInterval(next+2, next+2);
                model.remove(next);
            } else {
                last--;
            }
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        if (jList1.getSelectedIndices().length < jList1.getModel().getSize()) {
            jList1.setSelectionInterval(0, jList1.getModel().getSize()-1);
        } else {
            jList1.clearSelection();
        }

    }//GEN-LAST:event_selectAllButtonActionPerformed

    public void setConnectionList(List<String> list) {
        ((ConnectionsListModel) jList1.getModel()).setConnections(list);
    }

    public List<String> getConnectionList() {
        return ((ConnectionsListModel) jList1.getModel()).getConnections();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton customAddButton;
    private javax.swing.JButton downButton;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private class ConnectionsListModel extends AbstractListModel {

        private List<String> connections = null;

        @Override
        public int getSize() {
            if (connections == null) {
                return 0;
            }
            return connections.size();
        }

        @Override
        public Object getElementAt(int index) {
            return connections.get(index);
        }

        /**
         * @return the charsets
         */
        public List<String> getConnections() {
            return connections;
        }

        /**
         * @param charsets the charsets to set
         */
        public void setConnections(List<String> charsets) {
            this.connections = charsets;
            fireContentsChanged(this, 0, charsets.size());
        }

        public void addAll(List<String> list, int pos) {
            if (pos >= 0) {
                connections.addAll(pos, list);
                fireIntervalAdded(this, pos, list.size()+pos);
            } else {
                connections.addAll(list);
                fireIntervalAdded(this, connections.size()-list.size(), connections.size());
            }
        }

        public void removeIndices(int[] indices) {
            for (int i = 0; i < indices.length; i++) {
                connections.remove(indices[i]);
            }
            fireContentsChanged(this, 0, connections.size());
        }

        public void remove(int index) {
            connections.remove(index);
            fireIntervalRemoved(this, index, index);
        }

        public void add(int index, String item) {
            if (index >= 0) {
                connections.add(index, item);
                fireIntervalAdded(this, index, index);
            } else {
                connections.add(item);
                fireIntervalAdded(this, connections.size()-1, connections.size());
            }
        }
    }
}
