<html>
  <head>
    <link href="../../style.css" rel="stylesheet" type="text/css">
    
  </head>
  <body>
    <p class="heading1">
      Creating a dynamic menu
    </p>
    <p>
      In <a href="../../topic16/topic4.htm">stage 1</a> of SimplyHTML the menu 
      consisting of menu bar, menus and menu items had been hard coded in 
      method constructMenu. This part would always have to be changed when the 
      menu changes or is extended by additional functions. In stage 2 of the 
      application we therefore add functionality to build a menu dynamically 
      controlled by parameters from a resource file.
    </p>
    <p class="heading3">
      Connect actions dynamically
    </p>
    <p>
      Certainly actions triggered by menu selections still have to be coded 
      also because they contain the actual functionality in most cases. But 
      how actions are connected to menu items or other GUI elements does not 
      have to be hard coded and therefore actions are included in the change 
      towards a dynamic menu.
    </p>
    <p class="heading3">
      Advantage
    </p>
    <p>
      By having functions to dynamically construct and control a menu, the 
      code does not have to be changed again once a new menu is to be added or 
      changes in the menu structure occur.
    </p>
    <p>
      Menus and menu items can be added simply by making an entry in the 
      resource file.
    </p>
    <p class="heading2">
      How to automate the menu construction
    </p>
    <p>
      Each action has a name which we use as unique key, such as <font face="'Courier New',Monospaced,Monospace">
new</font>, <font face="'Courier New',Monospaced,Monospace">open</font>, <font face="'Courier New',Monospaced,Monospace">
save</font>, etc. In class <font face="'Courier New',Monospaced,Monospace">
      FrmMain's</font> constructor a <font face="'Courier New',Monospaced,Monospace">
commands</font> <font face="'Courier New',Monospaced,Monospace">Hashtable</font>
 is created with all actions of SimplyHTML and their action commands (<font face="'Courier New',Monospaced,Monospace">
new</font>, <font face="'Courier New',Monospaced,Monospace">save</font>, 
      etc.). With method <font face="'Courier New',Monospaced,Monospace">
      getAction</font>, an action can be fetched by its command name.
    </p>
    <p class="heading3">
      Method createMenuBar
    </p>
    <p>
      To create the menu bar a menu bar definition string from the resource 
      file is read having the key for each menu delimited by blanks (e.g. file 
      edit help). The keys are in the order as menus shall appear in the menu 
      bar.
    </p>
    <p class="heading3">
      Method createMenu
    </p>
    <p>
      To create menus a menu definition string from the resource file is read 
      having the action key for each menu item delimited by blanks. The keys 
      are in the order as items shall appear in respective menu.
    </p>
    <p class="heading3">
      Method createMenuItem
    </p>
    <p>
      Menu items are created with the key to 'their' action (new, save, etc.) 
      as the action command<font face="'Courier New',Monospaced,Monospace">.</font><font face="Sans-Serif">
 The key also serves to get the label for the menu item: In the resource file 
      all menu labels are named </font><font face="'Courier New',Monospaced,Monospace">
fileLabel</font><font face="Sans-Serif">, </font><font face="'Courier New',Monospaced,Monospace">
newLabel</font><font face="Sans-Serif">, </font><font face="'Courier New',Monospaced,Monospace">
saveLabel</font><font face="Sans-Serif">, etc. so they can be read 
      automatically and stored with the menu item. </font>
    </p>
    <p class="heading2">
      <font face="Sans-Serif">Consistent state handling over components </font>
    </p>
    <p>
      <font face="Sans-Serif">Menu items always should reflect if their action 
      is available at a certain point in time during execution of an 
      application. Actions in turn should only be available if it makes sense 
      at that point in time. Action close for instance should only be enabled, 
      if there are documents open, that can be closed. </font>
    </p>
    <p class="heading3">
      Listeners for interaction between menus, menu items and actions
    </p>
    <p>
      <font face="Sans-Serif">A reference between menus, menu items and 
      actions is created in several ways to ensure this behaviour: </font>
    </p>
    <ul>
      <li>
        <font face="Sans-Serif">The menu item is connected to a </font><font face="'Courier New',Monospaced,Monospace">
PropertyChangeListener</font><font face="Sans-Serif"> and registered with the 
        action belonging to that menu item to automatically update the state 
        of the menu item according to the state of the action.</font>
      </li>
      <li>
        <font face="Sans-Serif">The action in turn is registered with the menu 
        item as an </font><font face="'Courier New',Monospaced,Monospace">
        ActionListener</font><font face="Sans-Serif"> so that the action can 
        execute its </font><font face="'Courier New',Monospaced,Monospace">
        actionPerformed</font><font face="Sans-Serif"> method whenever the 
        menu item fires the action command.</font>
      </li>
      <li>
        <font face="Sans-Serif">Finally with each menu a </font><font face="'Courier New',Monospaced,Monospace">
MenuListener</font><font face="Sans-Serif"> is registered that updates the 
        action state of each item in respective menu whenever it is about to 
        be displayed. This ensures that always the actions are in the correct 
        state. (In later stages, this has to be refined by updating controls 
        other than menus if such are connected to actions in addition.)</font>
      </li>
    </ul>
  </body>
</html>
