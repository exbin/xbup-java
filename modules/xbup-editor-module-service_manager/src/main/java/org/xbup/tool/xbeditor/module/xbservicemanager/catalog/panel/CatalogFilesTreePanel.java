/*
 * Copyright (C) XBUP Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.xbup.tool.xbeditor.module.xbservicemanager.catalog.panel;

import java.awt.Component;
import java.awt.Frame;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.xbup.lib.xb.catalog.XBACatalog;
import org.xbup.lib.xb.catalog.base.XBCNode;
import org.xbup.lib.xb.catalog.base.XBCXFile;
import org.xbup.lib.xb.catalog.base.service.XBCNodeService;
import org.xbup.lib.xb.catalog.base.service.XBCXFileService;
import org.xbup.lib.xb.catalog.base.service.XBCXNameService;
import org.xbup.lib.xbcatalog.entity.XBEItem;
import org.xbup.lib.xbcatalog.entity.XBENode;
import org.xbup.lib.xbcatalog.entity.XBEXFile;
import org.xbup.lib.xbcatalog.yaml.XBCatalogYaml;
import org.xbup.tool.xbeditor.module.xbservicemanager.catalog.dialog.CatalogItemEditDialog;
import org.xbup.tool.xbeditor.module.xbservicemanager.catalog.panel.CatalogNodesTreeModel.CatalogNodesTreeItem;

/**
 * Catalog Specification Panel.
 *
 * @version 0.1 wr23.0 2013/09/30
 * @author XBUP Project (http://xbup.org)
 */
public class CatalogFilesTreePanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private XBCXNameService nameService;
    private XBCXFileService fileService;
    private CatalogNodesTreeModel nodesModel;
    private CatalogFilesTableModel filesModel;
    private XBCXFile currentItem;
    private XBCNode currentNode;
    private XBCatalogYaml catalogYaml;

    /** Creates new form CatalogAttributesPanel */
    public CatalogFilesTreePanel(XBACatalog catalog) {
        this.catalog = catalog;
        nameService = null;
        if (catalog != null) {
            nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
            fileService = (XBCXFileService) catalog.getCatalogService(XBCXFileService.class);
        }
        nodesModel = new CatalogNodesTreeModel(catalog);
        filesModel = new CatalogFilesTableModel(catalog);
        catalogYaml = new XBCatalogYaml(catalog);

        initComponents();
        catalogTree.setCellRenderer(new DefaultTreeCellRenderer() {
            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                DefaultTreeCellRenderer retValue = (DefaultTreeCellRenderer) super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
                if (value instanceof CatalogNodesTreeItem) {
                    XBCNode node = ((CatalogNodesTreeItem) value).getNode();
                    String nodeName = ((CatalogNodesTreeItem) value).getName();
                    if (nodeName == null) {
                        retValue.setText("node ["+node.getId().toString()+"]");
                    } else {
                        retValue.setText(nodeName);
                    }
                }

                return retValue;
            }
        });
        catalogFilesListTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    if (catalogFilesListTable.getSelectedRow()>=0) {
                        setItem(filesModel.getItem(catalogFilesListTable.getSelectedRow()));
                    } else {
                        setItem(null);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        catalogTreePopupMenu = new javax.swing.JPopupMenu();
        popupAddNodeMenuItem = new javax.swing.JMenuItem();
        popupAddFileMenuItem = new javax.swing.JMenuItem();
        popupImportItemMenuItem = new javax.swing.JMenuItem();
        popupExportItemMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        loadFileContentMenuItem = new javax.swing.JMenuItem();
        popupPropertiesMenuItem = new javax.swing.JMenuItem();
        panelSplitPane = new javax.swing.JSplitPane();
        catalogTreeScrollPane = new javax.swing.JScrollPane();
        catalogTree = new javax.swing.JTree();
        catalogItemListScrollPane = new javax.swing.JScrollPane();
        catalogFilesListTable = new javax.swing.JTable();

        catalogTreePopupMenu.setName("catalogTreePopupMenu"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/xbup/tool/xbeditor/module/xbservicemanager/catalog/panel/resources/CatalogItemsTreePanel"); // NOI18N
        popupAddNodeMenuItem.setText(bundle.getString("addNodeMenuItem.text")); // NOI18N
        popupAddNodeMenuItem.setName("popupAddNodeMenuItem"); // NOI18N
        popupAddNodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupAddNodeMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupAddNodeMenuItem);

        popupAddFileMenuItem.setText(bundle.getString("addFileMenuItem.text")); // NOI18N
        popupAddFileMenuItem.setName("popupAddFileMenuItem"); // NOI18N
        popupAddFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupAddFileMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupAddFileMenuItem);

        popupImportItemMenuItem.setText("Import...");
        popupImportItemMenuItem.setName("popupImportItemMenuItem"); // NOI18N
        popupImportItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupImportItemMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupImportItemMenuItem);

        popupExportItemMenuItem.setText("Export...");
        popupExportItemMenuItem.setName("popupExportItemMenuItem"); // NOI18N
        popupExportItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupExportItemMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupExportItemMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        catalogTreePopupMenu.add(jSeparator1);

        jSeparator2.setName("jSeparator2"); // NOI18N
        catalogTreePopupMenu.add(jSeparator2);

        loadFileContentMenuItem.setText("Load File Content...");
        loadFileContentMenuItem.setName("loadFileContentMenuItem"); // NOI18N
        loadFileContentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileContentMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(loadFileContentMenuItem);

        popupPropertiesMenuItem.setText(bundle.getString("propertiesMenuItem.text")); // NOI18N
        popupPropertiesMenuItem.setName("popupPropertiesMenuItem"); // NOI18N
        popupPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupPropertiesMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupPropertiesMenuItem);

        setName("Form"); // NOI18N

        panelSplitPane.setDividerLocation(100);
        panelSplitPane.setName("panelSplitPane"); // NOI18N

        catalogTreeScrollPane.setName("catalogTreeScrollPane"); // NOI18N

        catalogTree.setModel(nodesModel);
        catalogTree.setComponentPopupMenu(catalogTreePopupMenu);
        catalogTree.setName("catalogTree"); // NOI18N
        catalogTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                catalogTreeValueChanged(evt);
            }
        });
        catalogTreeScrollPane.setViewportView(catalogTree);

        panelSplitPane.setLeftComponent(catalogTreeScrollPane);

        catalogItemListScrollPane.setName("catalogItemListScrollPane"); // NOI18N

        catalogFilesListTable.setModel(filesModel);
        catalogFilesListTable.setComponentPopupMenu(catalogTreePopupMenu);
        catalogFilesListTable.setName("catalogFilesListTable"); // NOI18N
        catalogItemListScrollPane.setViewportView(catalogFilesListTable);

        panelSplitPane.setRightComponent(catalogItemListScrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void catalogTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_catalogTreeValueChanged
        if (catalogTree.getLastSelectedPathComponent()!=null) {
            if (nodesModel.isLeaf(catalogTree.getLastSelectedPathComponent())) {
                setNode(((CatalogNodesTreeItem) catalogTree.getLastSelectedPathComponent()).getNode());
            } else {
                setNode(((CatalogNodesTreeItem) catalogTree.getLastSelectedPathComponent()).getNode());
            }
        } else {
            setNode(null);
        }
    }//GEN-LAST:event_catalogTreeValueChanged

    private void popupAddNodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupAddNodeMenuItemActionPerformed
        if (currentItem != null) {
            XBCNodeService nodeService = (XBCNodeService) catalog.getCatalogService(XBCNodeService.class);
            XBCNode newNode = (XBCNode) nodeService.createItem();
            if (newNode instanceof XBENode) {
                ((XBENode)newNode).setParent((XBEItem)currentItem);
                nodeService.persistItem((XBENode)newNode);
                nodesModel.valueForPathChanged(null, newNode);
            }
        }
    }//GEN-LAST:event_popupAddNodeMenuItemActionPerformed

    private void popupPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupPropertiesMenuItemActionPerformed
        if (currentItem != null) {
            CatalogItemEditDialog propertiesDialog = new CatalogItemEditDialog(getFrame(), true);
            propertiesDialog.setCatalog(catalog);
            propertiesDialog.setCatalogItem(currentNode);
            propertiesDialog.setVisible(true);
        }
    }//GEN-LAST:event_popupPropertiesMenuItemActionPerformed

    private void popupExportItemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupExportItemMenuItemActionPerformed
        if (currentItem != null) {
            JFileChooser exportFileChooser = new JFileChooser();
            // exportFileChooser.setAcceptAllFileFilterUsed(true);
            if (exportFileChooser.showSaveDialog(getFrame()) == JFileChooser.APPROVE_OPTION) {
                FileWriter fileWriter;
                try {
                    fileWriter = new FileWriter(exportFileChooser.getSelectedFile().getAbsolutePath());
                    try {
                        catalogYaml.exportCatalogItem(currentNode, fileWriter);
                    } finally {
                        fileWriter.close();
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_popupExportItemMenuItemActionPerformed

    private void popupImportItemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupImportItemMenuItemActionPerformed
        if ((currentItem != null)&&(currentItem instanceof XBCNode)) {
            JFileChooser importFileChooser = new JFileChooser();
            // exportFileChooser.setAcceptAllFileFilterUsed(true);
            if (importFileChooser.showOpenDialog(getFrame()) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fileStream;
                try {
                    fileStream = new FileInputStream(importFileChooser.getSelectedFile().getAbsolutePath());
                    try {
                        catalogYaml.importCatalogItem(fileStream, (XBENode) currentItem);
                    } finally {
                        fileStream.close();
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_popupImportItemMenuItemActionPerformed

    private void loadFileContentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileContentMenuItemActionPerformed
        if (currentItem != null) {
            JFileChooser importFileChooser = new JFileChooser();
            if (importFileChooser.showOpenDialog(getFrame()) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fileStream;
                try {
                    fileStream = new FileInputStream(importFileChooser.getSelectedFile().getAbsolutePath());
                    byte[] imgDataBa = new byte[(int) (new File(importFileChooser.getSelectedFile().getAbsolutePath())).length()];
                    DataInputStream dataIs = new DataInputStream(fileStream);
                    dataIs.readFully(imgDataBa);
                    ((XBEXFile) currentItem).setContent(imgDataBa);
                    fileService.persistItem(currentItem);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_loadFileContentMenuItemActionPerformed

    private void popupAddFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupAddFileMenuItemActionPerformed
        if (currentNode != null) {
            JFileChooser importFileChooser = new JFileChooser();
            if (importFileChooser.showOpenDialog(getFrame()) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fileStream;
                try {
                    fileStream = new FileInputStream(importFileChooser.getSelectedFile().getAbsolutePath());
                    byte[] imgDataBa = new byte[(int) (new File(importFileChooser.getSelectedFile().getAbsolutePath())).length()];
                    DataInputStream dataIs = new DataInputStream(fileStream);
                    dataIs.readFully(imgDataBa);

                    XBEXFile file = (XBEXFile) fileService.createItem();
                    file.setNode((XBENode) currentNode);
                    file.setFilename(importFileChooser.getSelectedFile().getName());
                    file.setContent(imgDataBa);
                    fileService.persistItem(file);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CatalogFilesTreePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_popupAddFileMenuItemActionPerformed

    public void setNode(XBCNode node) {
        currentNode = node;
        filesModel.setNode(node);
        catalogFilesListTable.revalidate();
    }

    public void setItem(XBCXFile item) {
        currentItem = item;
        // itemPanel.setItem(item);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable catalogFilesListTable;
    private javax.swing.JScrollPane catalogItemListScrollPane;
    private javax.swing.JTree catalogTree;
    private javax.swing.JPopupMenu catalogTreePopupMenu;
    private javax.swing.JScrollPane catalogTreeScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem loadFileContentMenuItem;
    private javax.swing.JSplitPane panelSplitPane;
    private javax.swing.JMenuItem popupAddFileMenuItem;
    private javax.swing.JMenuItem popupAddNodeMenuItem;
    private javax.swing.JMenuItem popupExportItemMenuItem;
    private javax.swing.JMenuItem popupImportItemMenuItem;
    private javax.swing.JMenuItem popupPropertiesMenuItem;
    // End of variables declaration//GEN-END:variables

    private Frame getFrame() {
        Component component = SwingUtilities.getWindowAncestor(this);
        while (!(component == null || component instanceof Frame)) {
            component = component.getParent();
        }
        return (Frame) component;
    }

    public JPopupMenu getPopupMenu() {
        return catalogTreePopupMenu;
    }
}
